// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  first_name     String
  last_name      String
  email          String
  password       String
  refresh_token  String?
  email_verified Boolean     @default(false)
  registered_at  DateTime    @default(now())
  last_logged_at DateTime    @default(now())
  stillages      Stillage[]
  Shelf          Shelf[]
  university     University? @relation(fields: [university_id], references: [id])
  university_id  String?
  liked          String[]    @default([])
  forum          Forum[]
  answer         Answer[]
  comment        Comment[]
}

model EmailVerify {
  id   String @id @default(uuid())
  user String
}

model Stillage {
  id             String     @id @default(uuid())
  user           User       @relation(fields: [userId], references: [id])
  userId         String
  name           String
  created_at     DateTime   @default(now())
  last_upload_at DateTime   @default(now())
  shelf          Shelf[]
  files          File[]
  university     University @relation(fields: [university_id], references: [id])
  university_id  String
  private        Boolean    @default(true)
  color          String     @default("#019C56")

  @@index([university_id])
}

model Shelf {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  stillage       Stillage @relation(fields: [stillageId], references: [id])
  stillageId     String
  name           String
  last_upload_at DateTime @default(now())
  created_at     DateTime @default(now())
  files          File[]

  @@unique([name, stillageId], name: "uniqueNameInStillage")
}

model File {
  id           String   @id @default(uuid())
  filename     String
  text_content String
  content      Bytes
  size         Int
  uploaded_at  DateTime @default(now())
  shelf        Shelf    @relation(fields: [shelf_id], references: [id])
  shelf_id     String
  stillage     Stillage @relation(fields: [stillage_Id], references: [id])
  stillage_Id  String
}

model University {
  id       String     @id @default(uuid())
  name     String
  user     User[]
  stillage Stillage[]
}

model Forum {
  id     String   @id @default(uuid())
  title  String
  user   User     @relation(fields: [userId], references: [id])
  userId String
  tags   String[] @default([])
  body   String
}

model Answer {
  id      String    @id @default(uuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  body    String
  upvotes Int       @default(0)
  votes   String[]  @default([])
  updated Boolean   @default(false)
  comment Comment[]
}

model Comment {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  body     String
  answer   Answer  @relation(fields: [answerId], references: [id])
  answerId String
  updated  Boolean @default(false)
}
